#ifdef GLSL
layout (local_size_x = __wg_sz__, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0) readonly buffer in_ref_t{
  float in_buf_ref[];
};
layout(set = 0, binding = 1) buffer in_t{
  float in_buf[];
};
layout (set = 0, binding = 2) buffer POD
{
  int kern_sz;
  int stride;
  int in_pad;
  int out_buf_ref;
  int work;
};
void main()
#else
CUCL_GLOBAL_KERNEL void %(rtc_func_name)( GASQ float const * const in_buf_ref, // CUCL IN img:chan:y:x
                                          GASQ void const * const kern_sz, // CUCL REF y:x
                                          GASQ void const * const stride, // CUCL REF y:x
                                          GASQ void const * const in_pad, // CUCL REF y:x
                                          GASQ float const * const out_buf_ref, // CUCL REF img:chan:y:x
                                          GASQ void const * const work, // CUCL REF blk_bline:blk_bx:out_chan_blk:blk_y:out_chan_tile:pels:out_chan
					  GASQ float * const in_buf ) // CUCL OUT blk_bline:blk_bx:blk_in_chan:blk_y:blk_x
#endif
{
  // note: dim(in_ref.chan) == dim(out.blk_in_chan)
  // note: for out, blk_y and blk_x are in input space, but blk_bline and blk_bx are in output space. 
  // CUCL IX GLOB_ID_1D in_buf
  if( GLOB_ID_1D >= %(in_buf_dims_prod) ) { return; }

  const uint32_t out_ref_line = %(GLOB_ID_1D_blk_bline)*%(work_blk_y_dim);
  // CUCL IX out_ref_line out_buf_ref use_dims=img:y 

  const uint32_t fi_skip_in_lines = %(out_ref_line_y)*%(stride_y_dim); 
  const uint32_t in_line = (%(GLOB_ID_1D_blk_y)+fi_skip_in_lines);

  const uint32_t img_in_lines = (%(out_buf_ref_y_dim) - 1)*%(stride_y_dim) + %(kern_sz_y_dim);

  const uint32_t img_off = in_line/img_in_lines;
  const uint32_t img = %(out_ref_line_img) + img_off;

  const uint32_t iy = (in_line %% img_in_lines) - %(in_pad_y_dim); //%(out_ref_line_y)*%(stride_y_dim) + %(GLOB_ID_1D_blk_y) - %(in_pad_y_dim);
  const uint32_t ix = %(GLOB_ID_1D_blk_bx)*%(work_pels_dim)*%(stride_x_dim) + %(GLOB_ID_1D_blk_x) - %(in_pad_x_dim);
  
  float v = 0.0f;
  if(  ( ix >= 0 )
       && ( iy >= 0 )
       && ( ix < %(in_buf_ref_x_dim) )
       && ( iy < %(in_buf_ref_y_dim) )
       && ( img < %(in_buf_ref_img_dim) )
       )
  {
    v = in_buf_ref[ img*%(in_buf_ref_img_stride) +
	    %(GLOB_ID_1D_blk_in_chan)*%(in_buf_ref_chan_stride) +
	    iy*%(in_buf_ref_y_stride) +
	    ix*%(in_buf_ref_x_stride) ];
  }
  in_buf[GLOB_ID_1D] = v;
}
